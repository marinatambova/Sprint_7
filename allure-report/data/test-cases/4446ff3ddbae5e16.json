{"uid":"4446ff3ddbae5e16","name":"test_create_same_courier_fail","fullName":"tests.test_create_courier.TestCreateCourier#test_create_same_courier_fail","historyId":"82e229204f47b4399329c6dd25a1123e","time":{"start":1726599604068,"stop":1726599604217,"duration":149},"description":"Нельзя создать двух одинаковых курьеров.","descriptionHtml":"<p>Нельзя создать двух одинаковых курьеров.</p>\n","status":"failed","statusMessage":"AssertionError: Некорректное сообщение об ошибке\nassert 'Этот логин у...буйте другой.' == 'Этот логин уже используется'\n  \n  - Этот логин уже используется\n  + Этот логин уже используется. Попробуйте другой.","statusTrace":"self = <test_create_courier.TestCreateCourier object at 0x0000018AF2965100>\nnew_courier = {'id': 385098, 'login': 'ipazdwmamo', 'password': 'aneumsaqrk'}\n\n    def test_create_same_courier_fail(self, new_courier):\n        \"\"\"Нельзя создать двух одинаковых курьеров.\"\"\"\n        # Используем данные курьера из фикстуры\n        payload = {\n            \"login\": new_courier[\"login\"],\n            \"password\": new_courier[\"password\"],\n            \"firstName\": generate_random_string()\n        }\n    \n        # Пытаемся создать курьера с тем же логином\n        response = requests.post(f'{BASE_URL}/api/v1/courier', json=payload)\n        assert response.status_code == 409, \"Должен быть код 409 при создании курьера с существующим логином\"\n>       assert response.json()[\"message\"] == \"Этот логин уже используется\", \"Некорректное сообщение об ошибке\"\nE       AssertionError: Некорректное сообщение об ошибке\nE       assert 'Этот логин у...буйте другой.' == 'Этот логин уже используется'\nE         \nE         - Этот логин уже используется\nE         + Этот логин уже используется. Попробуйте другой.\n\ntests\\test_create_courier.py:49: AssertionError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"new_courier","time":{"start":1726599603815,"stop":1726599604067,"duration":252},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[{"name":"new_courier::0","time":{"start":1726599604224,"stop":1726599604360,"duration":136},"status":"passed","steps":[],"attachments":[],"parameters":[],"attachmentsCount":0,"shouldDisplayMessage":false,"stepsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"tag","value":"create_courier"},{"name":"parentSuite","value":"tests"},{"name":"suite","value":"test_create_courier"},{"name":"subSuite","value":"TestCreateCourier"},{"name":"host","value":"SC-WS-01209"},{"name":"thread","value":"20064-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.test_create_courier"},{"name":"resultFormat","value":"allure2"}],"parameters":[],"links":[],"hidden":true,"retry":true,"extra":{"categories":[],"tags":["create_courier"]},"source":"4446ff3ddbae5e16.json","parameterValues":[]}